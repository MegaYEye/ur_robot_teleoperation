// Generated by gencpp from file robot_test1/falconForces.msg
// DO NOT EDIT!


#ifndef ROBOT_TEST1_MESSAGE_FALCONFORCES_H
#define ROBOT_TEST1_MESSAGE_FALCONFORCES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_test1
{
template <class ContainerAllocator>
struct falconForces_
{
  typedef falconForces_<ContainerAllocator> Type;

  falconForces_()
    : X(0)
    , Y(0)
    , Z(0)  {
    }
  falconForces_(const ContainerAllocator& _alloc)
    : X(0)
    , Y(0)
    , Z(0)  {
  (void)_alloc;
    }



   typedef int16_t _X_type;
  _X_type X;

   typedef int16_t _Y_type;
  _Y_type Y;

   typedef int16_t _Z_type;
  _Z_type Z;




  typedef boost::shared_ptr< ::robot_test1::falconForces_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_test1::falconForces_<ContainerAllocator> const> ConstPtr;

}; // struct falconForces_

typedef ::robot_test1::falconForces_<std::allocator<void> > falconForces;

typedef boost::shared_ptr< ::robot_test1::falconForces > falconForcesPtr;
typedef boost::shared_ptr< ::robot_test1::falconForces const> falconForcesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_test1::falconForces_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_test1::falconForces_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace robot_test1

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'rosfalcon': ['/home/dong/Project/robot_test/src/rosfalcon/msg'], 'robot_test1': ['/home/dong/Project/robot_test/src/robot_test1/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::robot_test1::falconForces_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_test1::falconForces_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_test1::falconForces_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_test1::falconForces_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_test1::falconForces_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_test1::falconForces_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_test1::falconForces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b4669138e2c3f68ffec8f31ed47c17a1";
  }

  static const char* value(const ::robot_test1::falconForces_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb4669138e2c3f68fULL;
  static const uint64_t static_value2 = 0xfec8f31ed47c17a1ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_test1::falconForces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_test1/falconForces";
  }

  static const char* value(const ::robot_test1::falconForces_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_test1::falconForces_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 X\n\
int16 Y\n\
int16 Z\n\
";
  }

  static const char* value(const ::robot_test1::falconForces_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_test1::falconForces_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.X);
      stream.next(m.Y);
      stream.next(m.Z);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct falconForces_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_test1::falconForces_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_test1::falconForces_<ContainerAllocator>& v)
  {
    s << indent << "X: ";
    Printer<int16_t>::stream(s, indent + "  ", v.X);
    s << indent << "Y: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Y);
    s << indent << "Z: ";
    Printer<int16_t>::stream(s, indent + "  ", v.Z);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_TEST1_MESSAGE_FALCONFORCES_H
