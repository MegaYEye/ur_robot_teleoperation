#include <iostream>
#include <ros/ros.h>
#include <control_msgs/FollowJointTrajectoryAction.h>
#include <geometry_msgs/Pose.h>
#include <sensor_msgs/JointState.h>
#include <std_msgs/String.h>
#include <ur_msgs/SetIO.h>
#include <trac_ik/trac_ik.hpp>
#include <kdl/chainfksolverpos_recursive.hpp>
#include <actionlib/client/simple_action_client.h>
#include <boost/thread.hpp>
#include <tf/tf.h>
#include <tf/transform_listener.h>
#include <cmath>

#define TASK_POS_NUM	50
#define TIMEOUT_NUM		100
#define PI				3.1415926

using namespace std;
typedef actionlib::SimpleActionClient<control_msgs::FollowJointTrajectoryAction> Client;

const std::string default_joint_name[6] = {"shoulder_pan_joint",
										   "shoulder_lift_joint",
										   "elbow_joint",
										   "wrist_1_joint",
										   "wrist_2_joint",
										   "wrist_3_joint"};

const std::string default_link_name[8] = {"base_link",
										  "shoulder_link",
										  "upper_arm_link",
										  "forearm_link",
										  "wrist_1_link",
										  "wrist_2_link",
										  "wrist_3_link",
										  "ee_link"};


double test_pose_rpy[6] = { 0.14, 0.38, 0.26, 0.5, 1.57, 1.57 };
double test_pose_quatern[7] = { 0.128, 0.38, 0.23, 0.12, 0.69, -0.08, 0.71};
double dpos[3]={0,0,0};

class ur_control_demo
{
	protected:


		std::string ur_name;
		std::string ur_jointname[6];
		std::string ur_linkname[8];
		std::string topic_jointstate;

		std::string server_urio;
		std::string robot_description;
		std::string ur_action_client_name;

		KDL::Chain                              ur_chain;
		KDL::ChainFkSolverPos_recursive         *kdl_fk_solver;
		TRAC_IK::TRAC_IK                        *track_ik_solver;
		
		KDL::Frame								task_pose[TASK_POS_NUM];
		KDL::Frame								tagert_pose;
		KDL::Frame								access_tagertpose;

		sensor_msgs::JointState                 cur_RobotJointStates;
		sensor_msgs::JointState                 target_RobotJointStates;
		
		trajectory_msgs::JointTrajectoryPoint 	targetTra_robotJoint;
		trajectory_msgs::JointTrajectoryPoint 	curTra_robotJoint;
		control_msgs::FollowJointTrajectoryGoal mygoal;

		ros::NodeHandle			*nh, n;
		ros::Subscriber			ur_jointstate_sub;
		ros::Subscriber		        falconPos_sub; 
		
		ros::ServiceClient 		callsrv;

		Client					*client;
		boost::thread			ros_manager_thread;
		boost::mutex			cmd_mutex, joint_mutex;

	public:
		ur_control_demo(ros::NodeHandle _n):
			n(_n),
			ur_jointname(default_joint_name),
			ur_linkname(default_link_name),
			ur_name("ur3"),
			topic_jointstate("/joint_states"),
//			server_urio("/ur_driver/set_io"),
			robot_description("/robot_description"),
			ur_action_client_name("/follow_joint_trajectory"),

			ros_manager_thread(&ur_control_demo::ros_manager, this)
		{
			for(int i=0;i<6;i++)
			{
				cur_RobotJointStates.name.push_back(ur_jointname[i]);
				target_RobotJointStates.name.push_back(ur_jointname[i]);
				mygoal.trajectory.joint_names.push_back(ur_jointname[i]);
			}

			cur_RobotJointStates.position.resize(6);
			curTra_robotJoint.positions.resize(6);
			target_RobotJointStates.position.resize(6);
			targetTra_robotJoint.positions.resize(6);
			curTra_robotJoint.velocities.resize(6);
			targetTra_robotJoint.velocities.resize(6);

			client = new Client(ur_action_client_name, true);
			ROS_INFO("waiting for server...");
			bool state = client->waitForServer(ros::Duration(10));
			if(state) ROS_INFO("connected the server.");
			else {ROS_INFO("connect the server failed.");}

			track_ik_solver = new TRAC_IK::TRAC_IK(ur_linkname[0], ur_linkname[7], robot_description);
			track_ik_solver->getKDLChain(ur_chain);
			track_ik_solver->SetSolveType(TRAC_IK::Distance);
			kdl_fk_solver = new KDL::ChainFkSolverPos_recursive(ur_chain);

			//ros_manager_thread.join();
			usleep(100);
			ROS_INFO("binpicking task is running");
		}

		~ur_control_demo(void)
		{
			delete track_ik_solver;
			delete kdl_fk_solver;
			delete client;
		}

		void jointstates_subCB(const sensor_msgs::JointState &_msg)
		{
			joint_mutex.lock();
			cur_RobotJointStates = _msg;
			
			joint_mutex.unlock();
		}

		void sendmygoal(void)
		{
			mygoal.trajectory.header.stamp = ros::Time::now();
			client->sendGoal(mygoal);
		}

		int excTrack(void)
		{
			int status;
			sendmygoal();
			client->waitForResult(ros::Duration(0));

			if(client->getState() != actionlib::SimpleClientGoalState::SUCCEEDED)
			{
				client->cancelGoal();
				ROS_WARN("Robot Err, can't reach the goal.\n");
				status = 0;
			}
			else
			{
				ROS_INFO("task complete.\n");
				status = 1;
			}

			return status;
		}
		
		bool insertTrack(KDL::Frame _insertPoint, float _tms)
		{
			if(_tms <= 0) {ROS_INFO("duration time should be positive.");return 0;}
			KDL::JntArray cur_JointArray(6), target_JointArray;		
			mygoal.trajectory.points.resize(2);
			
			curTra_robotJoint.time_from_start = ros::Duration(0);				
			for(int i=0;i<6;i++)
			{
				curTra_robotJoint.positions[i] = cur_RobotJointStates.position[i];
				curTra_robotJoint.velocities[i] = 0;
			}
			mygoal.trajectory.points[0] = curTra_robotJoint;
			
			for(int i=0;i<6;i++) cur_JointArray(i) = curTra_robotJoint.positions[i];
			
			ROS_INFO("%f, %f, %f, %f, %f, %f", _insertPoint.p.data[0], _insertPoint.p.data[1], _insertPoint.p.data[2], _insertPoint.M.data[0], _insertPoint.M.data[1], _insertPoint.M.data[2]);
			
			int rc = track_ik_solver->CartToJnt(cur_JointArray, _insertPoint, target_JointArray);
			if(rc <= 0)
			{
				ROS_INFO("insert the goal failed");
				return false;
			}
			
			for(int i=0;i<6;i++)
			{
				targetTra_robotJoint.positions[i] = target_JointArray(i);
				targetTra_robotJoint.velocities[i] = (0);
				
			}

			targetTra_robotJoint.time_from_start = ros::Duration(_tms);
			mygoal.trajectory.points[1] = targetTra_robotJoint;
			return true;
		}

		bool moveto(const KDL::Frame &_pose, float _tm)
		{
			int state = 0;
			while(state==0 && ros::ok())
			{
				state = insertTrack(_pose, _tm);
				if(state) {state = excTrack();}
			}
			return true;
		}

		bool robot2home(void)
		{
			while(!moveto(task_pose[0], 1.0) && ros::ok()) sleep(1);
			return true;
		}
		void ros_manager(void)
		{
			ROS_INFO("ros manager is running.");
			ur_jointstate_sub = n.subscribe(topic_jointstate, 1, &ur_control_demo::jointstates_subCB, this);
			falconPos_sub = n.subscribe("/haptic/pose_1", 1, &ur_control_demo::start_ur_demo1,this);
			ros::Rate r(100);
			while(ros::ok())
			{
				r.sleep();
				ros::spinOnce();
			}
		}
		
		void start_ur_demo1(const geometry_msgs::PoseStampedConstPtr& msg)
		{   
			test_pose_rpy[0] = -dpos[0]+0.14;
			test_pose_rpy[1] = dpos[1]+0.38;
			test_pose_rpy[2] = dpos[2]+0.26;
			//test_pose_quatern[0] = msg->X;
			//test_pose_quatern[1] = msg->Y;
			//test_pose_quatern[2] = msg->Z;
                        dpos[1] = msg->pose.position.x;
			dpos[0] = msg->pose.position.y;
			dpos[2] = msg->pose.position.z;

			//test_pose_quatern[0] = dpos[0]+0.128;
			//test_pose_quatern[1] = dpos[1]+0.38;
			//test_pose_quatern[2] = dpos[2]+0.23;
			
			//task_pose[1].p = KDL::Vector(test_pose_quatern[0], test_pose_quatern[1], test_pose_quatern[2]);
			//task_pose[1].M = KDL::Rotation::Quaternion(test_pose_quatern[3], test_pose_quatern[4], test_pose_quatern[5], test_pose_quatern[6]);
			task_pose[1].p = KDL::Vector(test_pose_rpy[0], test_pose_rpy[1], test_pose_rpy[2]);
			task_pose[1].M = KDL::Rotation::RPY(test_pose_rpy[3], test_pose_rpy[4], test_pose_rpy[5]);
				moveto(task_pose[1], 1);

				//ros::shutdown();
				return;
			
			
		}
};


int main(int argc, char **argv)
{
	ros::init(argc, argv, "ur_control_demo_2");

	ros::NodeHandle n;
	ur_control_demo ur_demo(n);
	ur_demo.ros_manager();

	ros::shutdown();
	return 0;
}




